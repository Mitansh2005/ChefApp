[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "django.utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils",
        "description": "django.utils",
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "django.utils.encoding",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Countries",
        "importPath": "myapp.models",
        "description": "myapp.models",
        "isExtraImport": true,
        "detail": "myapp.models",
        "documentation": {}
    },
    {
        "label": "JobsTable",
        "importPath": "myapp.models",
        "description": "myapp.models",
        "isExtraImport": true,
        "detail": "myapp.models",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "importPath": "myapp.models",
        "description": "myapp.models",
        "isExtraImport": true,
        "detail": "myapp.models",
        "documentation": {}
    },
    {
        "label": "Countries",
        "importPath": "myapp.models",
        "description": "myapp.models",
        "isExtraImport": true,
        "detail": "myapp.models",
        "documentation": {}
    },
    {
        "label": "countries",
        "importPath": "django_countries",
        "description": "django_countries",
        "isExtraImport": true,
        "detail": "django_countries",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "pyrebase",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyrebase",
        "description": "pyrebase",
        "detail": "pyrebase",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http.response",
        "description": "django.http.response",
        "isExtraImport": true,
        "detail": "django.http.response",
        "documentation": {}
    },
    {
        "label": "countries_for_language",
        "importPath": "country_list",
        "description": "country_list",
        "isExtraImport": true,
        "detail": "country_list",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.base_user",
        "description": "django.contrib.auth.base_user",
        "isExtraImport": true,
        "detail": "django.contrib.auth.base_user",
        "documentation": {}
    },
    {
        "label": "graphene",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "graphene",
        "description": "graphene",
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "DjangoObjectType",
        "importPath": "graphene_django",
        "description": "graphene_django",
        "isExtraImport": true,
        "detail": "graphene_django",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "pycountry",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pycountry",
        "description": "pycountry",
        "detail": "pycountry",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "GraphQLView",
        "importPath": "graphene_django.views",
        "description": "graphene_django.views",
        "isExtraImport": true,
        "detail": "graphene_django.views",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.asgi",
        "description": "chefWeb.chefWeb.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "chefWeb.chefWeb.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-31us55w_!rm2e80a1rh=b50+@_5q^_=#yt7ji+m3a9gvu@^!o-'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-31us55w_!rm2e80a1rh=b50+@_5q^_=#yt7ji+m3a9gvu@^!o-'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'myapp',\n    'corsheaders',\n    'graphene_django',\n    'rest_framework',",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'myapp',\n    'corsheaders',\n    'graphene_django',\n    'rest_framework',\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'myapp',\n    'corsheaders',\n    'graphene_django',\n    'rest_framework',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'myapp',\n    'corsheaders',\n    'graphene_django',\n    'rest_framework',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "GRAPHENE",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "GRAPHENE = {\n    'SCHEMA': 'myapp.schema.schema'\n}\nMIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "ROOT_URLCONF = 'chefWeb.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "WSGI_APPLICATION = 'chefWeb.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nAUTH_USER_MODEL='myapp.CustomUser'\nSTATIC_URL = 'static/'\nMEDIA_URL = 'uploads/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nAUTH_USER_MODEL='myapp.CustomUser'\nSTATIC_URL = 'static/'\nMEDIA_URL = 'uploads/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')\nSTATIC_ROOT=os.path.join(BASE_DIR,'static')",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nAUTH_USER_MODEL='myapp.CustomUser'\nSTATIC_URL = 'static/'\nMEDIA_URL = 'uploads/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')\nSTATIC_ROOT=os.path.join(BASE_DIR,'static')\nSTATIC_DIRS=[",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nAUTH_USER_MODEL='myapp.CustomUser'\nSTATIC_URL = 'static/'\nMEDIA_URL = 'uploads/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')\nSTATIC_ROOT=os.path.join(BASE_DIR,'static')\nSTATIC_DIRS=[\n    BASE_DIR,\"static\",",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nMEDIA_URL = 'uploads/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')\nSTATIC_ROOT=os.path.join(BASE_DIR,'static')\nSTATIC_DIRS=[\n    BASE_DIR,\"static\",\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "MEDIA_URL = 'uploads/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')\nSTATIC_ROOT=os.path.join(BASE_DIR,'static')\nSTATIC_DIRS=[\n    BASE_DIR,\"static\",\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ALLOWED_ORIGINS = [",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')\nSTATIC_ROOT=os.path.join(BASE_DIR,'static')\nSTATIC_DIRS=[\n    BASE_DIR,\"static\",\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n]\nCSRF_TRUSTED_ORIGINS = [\n    \"http://localhost:5173\",  # Your React app's URL\n]",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n]\nCSRF_TRUSTED_ORIGINS = [\n    \"http://localhost:5173\",  # Your React app's URL\n]",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.settings",
        "description": "chefWeb.chefWeb.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = [\n    \"http://localhost:5173\",  # Your React app's URL\n]",
        "detail": "chefWeb.chefWeb.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.urls",
        "description": "chefWeb.chefWeb.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/',include(\"myapp.urls\"))\n]",
        "detail": "chefWeb.chefWeb.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "chefWeb.chefWeb.wsgi",
        "description": "chefWeb.chefWeb.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "chefWeb.chefWeb.wsgi",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "chefWeb.myapp.management.commands.populate_countries",
        "description": "chefWeb.myapp.management.commands.populate_countries",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Populate Countries table with fake data'\n    def handle(self, *args, **kwargs):\n        fake = Faker()\n        # Get a dictionary of ISO country codes mapped to their full names\n        country_choices = dict(countries)\n        country_codes = list(country_choices.keys())\n        for _ in range(100):  # You can modify this number to generate more/less records\n            country_code = random.choice(country_codes)  # Randomly choose a country code\n            state = fake.state()",
        "detail": "chefWeb.myapp.management.commands.populate_countries",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "chefWeb.myapp.management.commands.populate_jobs",
        "description": "chefWeb.myapp.management.commands.populate_jobs",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Populate Jobs table with fake data'\n    def handle(self, *args, **kwargs):\n        num_jobs = 50  # You can adjust this value\n        fake_jobs = generate_fake_job_data(num_jobs)\n        # Bulk create fake jobs in the database\n        JobsTable.objects.bulk_create(fake_jobs)\n        self.stdout.write(self.style.SUCCESS(f'Successfully populated {num_jobs} fake jobs into the database!'))",
        "detail": "chefWeb.myapp.management.commands.populate_jobs",
        "documentation": {}
    },
    {
        "label": "get_next_user_id",
        "kind": 2,
        "importPath": "chefWeb.myapp.management.commands.populate_jobs",
        "description": "chefWeb.myapp.management.commands.populate_jobs",
        "peekOfCode": "def get_next_user_id():\n    global user_id_counter\n    current_id = user_id_counter\n    user_id_counter += 1\n    return current_id\n# Function to generate fake job data\ndef generate_fake_job_data(num_jobs):\n    jobs = []\n        # Fetch only users who are employers\n    employer_users = CustomUser.objects.filter(user_type=\"employer\")",
        "detail": "chefWeb.myapp.management.commands.populate_jobs",
        "documentation": {}
    },
    {
        "label": "generate_fake_job_data",
        "kind": 2,
        "importPath": "chefWeb.myapp.management.commands.populate_jobs",
        "description": "chefWeb.myapp.management.commands.populate_jobs",
        "peekOfCode": "def generate_fake_job_data(num_jobs):\n    jobs = []\n        # Fetch only users who are employers\n    employer_users = CustomUser.objects.filter(user_type=\"employer\")\n    locations_choices=Countries.objects.all()\n    if not employer_users.exists():\n        raise ValueError(\"No employer users found in the CustomUser table. Please create employers first.\")\n    for _ in range(num_jobs):\n        userid =random.choice(employer_users)\n        job_id = get_next_user_id()",
        "detail": "chefWeb.myapp.management.commands.populate_jobs",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "chefWeb.myapp.management.commands.populate_jobs",
        "description": "chefWeb.myapp.management.commands.populate_jobs",
        "peekOfCode": "fake = Faker()\n# Define possible employment types\nemployment_types = [\"full\", \"part\"]\nuser_id_counter = 2\ndef get_next_user_id():\n    global user_id_counter\n    current_id = user_id_counter\n    user_id_counter += 1\n    return current_id\n# Function to generate fake job data",
        "detail": "chefWeb.myapp.management.commands.populate_jobs",
        "documentation": {}
    },
    {
        "label": "employment_types",
        "kind": 5,
        "importPath": "chefWeb.myapp.management.commands.populate_jobs",
        "description": "chefWeb.myapp.management.commands.populate_jobs",
        "peekOfCode": "employment_types = [\"full\", \"part\"]\nuser_id_counter = 2\ndef get_next_user_id():\n    global user_id_counter\n    current_id = user_id_counter\n    user_id_counter += 1\n    return current_id\n# Function to generate fake job data\ndef generate_fake_job_data(num_jobs):\n    jobs = []",
        "detail": "chefWeb.myapp.management.commands.populate_jobs",
        "documentation": {}
    },
    {
        "label": "user_id_counter",
        "kind": 5,
        "importPath": "chefWeb.myapp.management.commands.populate_jobs",
        "description": "chefWeb.myapp.management.commands.populate_jobs",
        "peekOfCode": "user_id_counter = 2\ndef get_next_user_id():\n    global user_id_counter\n    current_id = user_id_counter\n    user_id_counter += 1\n    return current_id\n# Function to generate fake job data\ndef generate_fake_job_data(num_jobs):\n    jobs = []\n        # Fetch only users who are employers",
        "detail": "chefWeb.myapp.management.commands.populate_jobs",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "chefWeb.myapp.migrations.0001_initial",
        "description": "chefWeb.myapp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Countries',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "chefWeb.myapp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "chefWeb.myapp.migrations.0002_alter_customuser_date_joined_and_more",
        "description": "chefWeb.myapp.migrations.0002_alter_customuser_date_joined_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('myapp', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='customuser',\n            name='date_joined',\n            field=models.DateField(auto_now_add=True),\n        ),",
        "detail": "chefWeb.myapp.migrations.0002_alter_customuser_date_joined_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "chefWeb.myapp.migrations.0003_alter_customuser_profile_picture",
        "description": "chefWeb.myapp.migrations.0003_alter_customuser_profile_picture",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('myapp', '0002_alter_customuser_date_joined_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='customuser',\n            name='profile_picture',\n            field=models.ImageField(blank=True, null=True, upload_to='profiles/'),\n        ),",
        "detail": "chefWeb.myapp.migrations.0003_alter_customuser_profile_picture",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "chefWeb.myapp.migrations.0004_rename_employement_type_jobstable_employment_type",
        "description": "chefWeb.myapp.migrations.0004_rename_employement_type_jobstable_employment_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('myapp', '0003_alter_customuser_profile_picture'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='jobstable',\n            old_name='employement_type',\n            new_name='employment_type',\n        ),",
        "detail": "chefWeb.myapp.migrations.0004_rename_employement_type_jobstable_employment_type",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "chefWeb.myapp.admin",
        "description": "chefWeb.myapp.admin",
        "peekOfCode": "class UserAdmin(BaseUserAdmin):\n    model = CustomUser\n    list_display=[\"user_id\",\"email\",\"first_name\",\"last_name\",\"phone_number\",\"profile_picture\",\"user_type\",\"is_staff\"]\n    fieldsets = (\n    (None, {'fields': ('email', 'password')}),\n    ('Personal info', {'fields': ('first_name', 'last_name', 'phone_number', 'profile_picture', 'user_type')}),\n    ('Permissions', {'fields': ('is_staff', 'is_active', 'is_superuser', 'groups', 'user_permissions')}),\n    ('Important dates', {'fields': ('last_login',)}),\n    )\n    add_fieldsets = (",
        "detail": "chefWeb.myapp.admin",
        "documentation": {}
    },
    {
        "label": "ProfileAdmin",
        "kind": 6,
        "importPath": "chefWeb.myapp.admin",
        "description": "chefWeb.myapp.admin",
        "peekOfCode": "class ProfileAdmin(admin.ModelAdmin):\n  list_display=[\"profile_id\",\"user_id\",\"first_name\",\"last_name\",\"location\",\"bio\",\"experience_years\",\"speciality\"]\nclass LocationAdmin(admin.ModelAdmin):\n  list_display=[\"country\",\"state\",\"city\",\"postal_code\"]\nclass JobAdmin(admin.ModelAdmin):\n  list_display=[\"user_id\",\"job_id\",\"title\",\"description\",\"location\",\"salary\",\"employment_type\",\"posted_date\",\"application_deadline\",\"short_description\"]\n  def short_description(self, obj):\n        length = 100  # Adjust this value to your desired length\n        return (obj.description[:length] + '...') if len(obj.description) > length else obj.description\n  short_description.short_description = 'requirements'",
        "detail": "chefWeb.myapp.admin",
        "documentation": {}
    },
    {
        "label": "LocationAdmin",
        "kind": 6,
        "importPath": "chefWeb.myapp.admin",
        "description": "chefWeb.myapp.admin",
        "peekOfCode": "class LocationAdmin(admin.ModelAdmin):\n  list_display=[\"country\",\"state\",\"city\",\"postal_code\"]\nclass JobAdmin(admin.ModelAdmin):\n  list_display=[\"user_id\",\"job_id\",\"title\",\"description\",\"location\",\"salary\",\"employment_type\",\"posted_date\",\"application_deadline\",\"short_description\"]\n  def short_description(self, obj):\n        length = 100  # Adjust this value to your desired length\n        return (obj.description[:length] + '...') if len(obj.description) > length else obj.description\n  short_description.short_description = 'requirements'\nclass ApplicationAdmin(admin.ModelAdmin):\n  list_display=[\"application_id\",\"job_id\",\"applicant_id\",\"application_date\",\"status\"]",
        "detail": "chefWeb.myapp.admin",
        "documentation": {}
    },
    {
        "label": "JobAdmin",
        "kind": 6,
        "importPath": "chefWeb.myapp.admin",
        "description": "chefWeb.myapp.admin",
        "peekOfCode": "class JobAdmin(admin.ModelAdmin):\n  list_display=[\"user_id\",\"job_id\",\"title\",\"description\",\"location\",\"salary\",\"employment_type\",\"posted_date\",\"application_deadline\",\"short_description\"]\n  def short_description(self, obj):\n        length = 100  # Adjust this value to your desired length\n        return (obj.description[:length] + '...') if len(obj.description) > length else obj.description\n  short_description.short_description = 'requirements'\nclass ApplicationAdmin(admin.ModelAdmin):\n  list_display=[\"application_id\",\"job_id\",\"applicant_id\",\"application_date\",\"status\"]\nclass MessageAdmin(admin.ModelAdmin):\n  list_display=[\"user\",\"sender\",\"receiver\",\"message_content\",\"sent_date\",\"read_status\"]",
        "detail": "chefWeb.myapp.admin",
        "documentation": {}
    },
    {
        "label": "ApplicationAdmin",
        "kind": 6,
        "importPath": "chefWeb.myapp.admin",
        "description": "chefWeb.myapp.admin",
        "peekOfCode": "class ApplicationAdmin(admin.ModelAdmin):\n  list_display=[\"application_id\",\"job_id\",\"applicant_id\",\"application_date\",\"status\"]\nclass MessageAdmin(admin.ModelAdmin):\n  list_display=[\"user\",\"sender\",\"receiver\",\"message_content\",\"sent_date\",\"read_status\"]\nclass NotificationAdmin(admin.ModelAdmin):\n  list_display=[\"notification_id\",\"user_id\",\"notification_type\",\"message\",\"sent_date\",\"read_status\"]\nadmin.site.register(ProfileTable,ProfileAdmin)\nadmin.site.register(CustomUser,UserAdmin)\nadmin.site.register(Countries,LocationAdmin)\nadmin.site.register(JobsTable,JobAdmin)",
        "detail": "chefWeb.myapp.admin",
        "documentation": {}
    },
    {
        "label": "MessageAdmin",
        "kind": 6,
        "importPath": "chefWeb.myapp.admin",
        "description": "chefWeb.myapp.admin",
        "peekOfCode": "class MessageAdmin(admin.ModelAdmin):\n  list_display=[\"user\",\"sender\",\"receiver\",\"message_content\",\"sent_date\",\"read_status\"]\nclass NotificationAdmin(admin.ModelAdmin):\n  list_display=[\"notification_id\",\"user_id\",\"notification_type\",\"message\",\"sent_date\",\"read_status\"]\nadmin.site.register(ProfileTable,ProfileAdmin)\nadmin.site.register(CustomUser,UserAdmin)\nadmin.site.register(Countries,LocationAdmin)\nadmin.site.register(JobsTable,JobAdmin)\nadmin.site.register(ApplicationTable,ApplicationAdmin)\nadmin.site.register(MessageTable,MessageAdmin)",
        "detail": "chefWeb.myapp.admin",
        "documentation": {}
    },
    {
        "label": "NotificationAdmin",
        "kind": 6,
        "importPath": "chefWeb.myapp.admin",
        "description": "chefWeb.myapp.admin",
        "peekOfCode": "class NotificationAdmin(admin.ModelAdmin):\n  list_display=[\"notification_id\",\"user_id\",\"notification_type\",\"message\",\"sent_date\",\"read_status\"]\nadmin.site.register(ProfileTable,ProfileAdmin)\nadmin.site.register(CustomUser,UserAdmin)\nadmin.site.register(Countries,LocationAdmin)\nadmin.site.register(JobsTable,JobAdmin)\nadmin.site.register(ApplicationTable,ApplicationAdmin)\nadmin.site.register(MessageTable,MessageAdmin)\nadmin.site.register(NotificationTable,NotificationAdmin)",
        "detail": "chefWeb.myapp.admin",
        "documentation": {}
    },
    {
        "label": "MyappConfig",
        "kind": 6,
        "importPath": "chefWeb.myapp.apps",
        "description": "chefWeb.myapp.apps",
        "peekOfCode": "class MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'",
        "detail": "chefWeb.myapp.apps",
        "documentation": {}
    },
    {
        "label": "SignInWithEmailAndPassword",
        "kind": 2,
        "importPath": "chefWeb.myapp.authentication",
        "description": "chefWeb.myapp.authentication",
        "peekOfCode": "def SignInWithEmailAndPassword(email,password):\n  user=auth.sign_in_with_email_and_password(email,password)\n  db=firebase.database()\n  # Pass the user's idToken to the push method\n  results = db.child(\"users\").push(user['idToken'])\n  return HttpResponse(status=200)",
        "detail": "chefWeb.myapp.authentication",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "chefWeb.myapp.authentication",
        "description": "chefWeb.myapp.authentication",
        "peekOfCode": "config = {\n  \"apiKey\": \"AIzaSyD7WJcDRrOVKEfoe2hvfGwjTljhjS_JW4o\",\n  \"authDomain\": \"chef-web-8a2f2.firebaseapp.com\",\n  \"projectId\": \"chef-web-8a2f2\",\n  \"storageBucket\": \"chef-web-8a2f2.appspot.com\",\n  \"messagingSenderId\": \"909916564111\",\n  \"appId\": \"1:909916564111:web:6a929f1d0b21f846e35efa\"\n}\nfirebase = pyrebase.initialize_app(config)\nauth=firebase.auth()",
        "detail": "chefWeb.myapp.authentication",
        "documentation": {}
    },
    {
        "label": "firebase",
        "kind": 5,
        "importPath": "chefWeb.myapp.authentication",
        "description": "chefWeb.myapp.authentication",
        "peekOfCode": "firebase = pyrebase.initialize_app(config)\nauth=firebase.auth()\ndef SignInWithEmailAndPassword(email,password):\n  user=auth.sign_in_with_email_and_password(email,password)\n  db=firebase.database()\n  # Pass the user's idToken to the push method\n  results = db.child(\"users\").push(user['idToken'])\n  return HttpResponse(status=200)",
        "detail": "chefWeb.myapp.authentication",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "chefWeb.myapp.models",
        "description": "chefWeb.myapp.models",
        "peekOfCode": "class UserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        if not email:\n            raise ValueError(\"Email is required\")\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, email, password=None, **extra_fields):",
        "detail": "chefWeb.myapp.models",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 6,
        "importPath": "chefWeb.myapp.models",
        "description": "chefWeb.myapp.models",
        "peekOfCode": "class CustomUser(AbstractUser):\n    EMPLOYER = 'employer'\n    EMPLOYEE = 'employee'\n    USER_TYPE_CHOICES = [\n        (EMPLOYER, 'Employer'),\n        (EMPLOYEE, 'Employee'),\n    ]\n    user_id = models.AutoField(primary_key=True)\n    username = models.CharField(max_length=500)\n    password = models.CharField(max_length=128)",
        "detail": "chefWeb.myapp.models",
        "documentation": {}
    },
    {
        "label": "Countries",
        "kind": 6,
        "importPath": "chefWeb.myapp.models",
        "description": "chefWeb.myapp.models",
        "peekOfCode": "class Countries(models.Model):\n  countries = dict(countries_for_language('en'))\n  country=models.CharField(max_length=2,choices=countries)\n  state=models.CharField(max_length=150)\n  city=models.CharField(max_length=150)\n  postal_code=models.CharField(max_length=10)\n  def __str__(self) -> str:\n    return f\"{self.country}\\t{self.state}\\t{self.city}\\t{self.postal_code}\"\nclass ProfileTable(models.Model):\n  profile_id=models.AutoField(primary_key=True)",
        "detail": "chefWeb.myapp.models",
        "documentation": {}
    },
    {
        "label": "ProfileTable",
        "kind": 6,
        "importPath": "chefWeb.myapp.models",
        "description": "chefWeb.myapp.models",
        "peekOfCode": "class ProfileTable(models.Model):\n  profile_id=models.AutoField(primary_key=True)\n  user_id=models.OneToOneField(CustomUser,on_delete=models.CASCADE)\n  first_name=models.CharField(max_length=150)\n  last_name=models.CharField(max_length=150)\n  location=models.ForeignKey(Countries,on_delete=models.SET_NULL,null=True)\n  bio=models.TextField(max_length=500)\n  experience_years=models.CharField(max_length=2)\n  speciality=models.CharField(max_length=250)\nclass JobsTable(models.Model):",
        "detail": "chefWeb.myapp.models",
        "documentation": {}
    },
    {
        "label": "JobsTable",
        "kind": 6,
        "importPath": "chefWeb.myapp.models",
        "description": "chefWeb.myapp.models",
        "peekOfCode": "class JobsTable(models.Model):\n  EMP_TYPES=(\n    (\"full\",\"full_time\"),\n    (\"part\",\"part_time\")\n  )\n  user_id=models.ForeignKey(CustomUser,on_delete=models.CASCADE)\n  job_id=models.AutoField(primary_key=True)\n  title=models.CharField(max_length=200)\n  description=models.TextField(max_length=250)\n  location=models.ForeignKey(Countries,on_delete=models.CASCADE)",
        "detail": "chefWeb.myapp.models",
        "documentation": {}
    },
    {
        "label": "ApplicationTable",
        "kind": 6,
        "importPath": "chefWeb.myapp.models",
        "description": "chefWeb.myapp.models",
        "peekOfCode": "class ApplicationTable(models.Model):\n  STATUS=(\n    (\"p\",\"pending\"),\n    (\"a\",\"accepted\"),\n    (\"r\",\"rejected\")\n  )\n  application_id=models.AutoField(primary_key=True)\n  job_id=models.ForeignKey(JobsTable,on_delete=models.CASCADE)\n  applicant_id=models.ForeignKey(CustomUser,models.CASCADE)\n  application_date=models.DateField()",
        "detail": "chefWeb.myapp.models",
        "documentation": {}
    },
    {
        "label": "MessageTable",
        "kind": 6,
        "importPath": "chefWeb.myapp.models",
        "description": "chefWeb.myapp.models",
        "peekOfCode": "class MessageTable(models.Model):\n  user = models.ForeignKey(CustomUser, on_delete=models.SET_NULL, null=True, related_name=\"user\")\n  sender = models.ForeignKey(CustomUser, on_delete=models.SET_NULL, null=True, related_name=\"sender\")\n  receiver = models.ForeignKey(CustomUser, on_delete=models.SET_NULL, null=True, related_name=\"receiver\")\n  message_content=models.TextField(max_length=65535)\n  sent_date=models.DateField(auto_now_add=True)\n  read_status=models.BooleanField(default=False)\n  class Meta:\n    ordering=['sent_date']\n  def __str__(self):",
        "detail": "chefWeb.myapp.models",
        "documentation": {}
    },
    {
        "label": "NotificationTable",
        "kind": 6,
        "importPath": "chefWeb.myapp.models",
        "description": "chefWeb.myapp.models",
        "peekOfCode": "class NotificationTable(models.Model):\n  NOTIFICATION_TYPE=(\n    (\"new_job\",\"new job\"),\n    (\"application_status\",\"application status\")\n  )\n  notification_id=models.AutoField(primary_key=True)\n  user_id=models.ForeignKey(CustomUser,on_delete=models.CASCADE)\n  notification_type=models.CharField(max_length=50,choices=NOTIFICATION_TYPE)\n  message=models.TextField(max_length=1500)\n  sent_date=models.DateField()",
        "detail": "chefWeb.myapp.models",
        "documentation": {}
    },
    {
        "label": "LocationType",
        "kind": 6,
        "importPath": "chefWeb.myapp.schema",
        "description": "chefWeb.myapp.schema",
        "peekOfCode": "class LocationType(DjangoObjectType):\n    class Meta:\n        model = Countries\n        fields = ('country', 'state', 'city', 'postal_code')\nclass JobsTableType(DjangoObjectType):\n    class Meta:\n        model = JobsTable\n        fields=\"__all__\"\nclass Query(graphene.ObjectType):\n    all_jobs = graphene.List(JobsTableType)",
        "detail": "chefWeb.myapp.schema",
        "documentation": {}
    },
    {
        "label": "JobsTableType",
        "kind": 6,
        "importPath": "chefWeb.myapp.schema",
        "description": "chefWeb.myapp.schema",
        "peekOfCode": "class JobsTableType(DjangoObjectType):\n    class Meta:\n        model = JobsTable\n        fields=\"__all__\"\nclass Query(graphene.ObjectType):\n    all_jobs = graphene.List(JobsTableType)\n    def resolve_all_jobs(self,info):\n        return JobsTable.objects.all()\nschema = graphene.Schema(query=Query)",
        "detail": "chefWeb.myapp.schema",
        "documentation": {}
    },
    {
        "label": "Query",
        "kind": 6,
        "importPath": "chefWeb.myapp.schema",
        "description": "chefWeb.myapp.schema",
        "peekOfCode": "class Query(graphene.ObjectType):\n    all_jobs = graphene.List(JobsTableType)\n    def resolve_all_jobs(self,info):\n        return JobsTable.objects.all()\nschema = graphene.Schema(query=Query)",
        "detail": "chefWeb.myapp.schema",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 5,
        "importPath": "chefWeb.myapp.schema",
        "description": "chefWeb.myapp.schema",
        "peekOfCode": "schema = graphene.Schema(query=Query)",
        "detail": "chefWeb.myapp.schema",
        "documentation": {}
    },
    {
        "label": "ProfileSerializer",
        "kind": 6,
        "importPath": "chefWeb.myapp.serializers",
        "description": "chefWeb.myapp.serializers",
        "peekOfCode": "class ProfileSerializer(serializers.ModelSerializer):\n  class Meta:\n    model=ProfileTable\n    fields=\"__all__\"  \nclass CountriesSerializer(serializers.ModelSerializer):\n  country_name = serializers.SerializerMethodField()  # Add custom field for country name\n  class Meta:\n      model = Countries\n      fields = ['country','country_name', 'state', 'city', 'postal_code']\n  def get_country_name(self, obj):",
        "detail": "chefWeb.myapp.serializers",
        "documentation": {}
    },
    {
        "label": "CountriesSerializer",
        "kind": 6,
        "importPath": "chefWeb.myapp.serializers",
        "description": "chefWeb.myapp.serializers",
        "peekOfCode": "class CountriesSerializer(serializers.ModelSerializer):\n  country_name = serializers.SerializerMethodField()  # Add custom field for country name\n  class Meta:\n      model = Countries\n      fields = ['country','country_name', 'state', 'city', 'postal_code']\n  def get_country_name(self, obj):\n    try:\n       # Convert country code to country name\n      country_name_id= pycountry.countries.get(alpha_2=obj.country).name\n      return country_name_id",
        "detail": "chefWeb.myapp.serializers",
        "documentation": {}
    },
    {
        "label": "JobsTitleSerializer",
        "kind": 6,
        "importPath": "chefWeb.myapp.serializers",
        "description": "chefWeb.myapp.serializers",
        "peekOfCode": "class JobsTitleSerializer(serializers.ModelSerializer):\n  class Meta:\n    model=JobsTable\n    fields=[\"title\"]\nclass JobsSerializer(serializers.ModelSerializer):\n  location=CountriesSerializer()\n  class Meta:\n    model=JobsTable\n    fields=['user_id','job_id', 'title', 'description', 'location', 'salary', 'employment_type', 'posted_date', 'application_deadline', 'requirements']\nclass ApplicationSerializer(serializers.ModelSerializer):",
        "detail": "chefWeb.myapp.serializers",
        "documentation": {}
    },
    {
        "label": "JobsSerializer",
        "kind": 6,
        "importPath": "chefWeb.myapp.serializers",
        "description": "chefWeb.myapp.serializers",
        "peekOfCode": "class JobsSerializer(serializers.ModelSerializer):\n  location=CountriesSerializer()\n  class Meta:\n    model=JobsTable\n    fields=['user_id','job_id', 'title', 'description', 'location', 'salary', 'employment_type', 'posted_date', 'application_deadline', 'requirements']\nclass ApplicationSerializer(serializers.ModelSerializer):\n  class Meta:\n    model=ApplicationTable\n    fields=\"__all__\"\nclass MessageSerializer(serializers.ModelSerializer):",
        "detail": "chefWeb.myapp.serializers",
        "documentation": {}
    },
    {
        "label": "ApplicationSerializer",
        "kind": 6,
        "importPath": "chefWeb.myapp.serializers",
        "description": "chefWeb.myapp.serializers",
        "peekOfCode": "class ApplicationSerializer(serializers.ModelSerializer):\n  class Meta:\n    model=ApplicationTable\n    fields=\"__all__\"\nclass MessageSerializer(serializers.ModelSerializer):\n  sender_profile=ProfileSerializer(read_only=True)\n  receiver_profile=ProfileSerializer(read_only=True)\n  class Meta:\n    model=MessageTable\n    fields=[\"id\",\"user\",\"sender\",\"sender_profile\",\"receiver\",\"receiver_profile\",\"message_content\",\"sent_date\",\"read_status\"]",
        "detail": "chefWeb.myapp.serializers",
        "documentation": {}
    },
    {
        "label": "MessageSerializer",
        "kind": 6,
        "importPath": "chefWeb.myapp.serializers",
        "description": "chefWeb.myapp.serializers",
        "peekOfCode": "class MessageSerializer(serializers.ModelSerializer):\n  sender_profile=ProfileSerializer(read_only=True)\n  receiver_profile=ProfileSerializer(read_only=True)\n  class Meta:\n    model=MessageTable\n    fields=[\"id\",\"user\",\"sender\",\"sender_profile\",\"receiver\",\"receiver_profile\",\"message_content\",\"sent_date\",\"read_status\"]",
        "detail": "chefWeb.myapp.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "chefWeb.myapp.urls",
        "description": "chefWeb.myapp.urls",
        "peekOfCode": "urlpatterns = [\n  path(\"jobs\",views.JobsList.as_view(),name=\"all_jobs\"),\n  # path(\"jobs_titles\",views.JobsTitle,name=\"job-titles\"),\n  path(\"jobs_detail\",views.JobsDetail.as_view(),name=\"job_details_update\"),\n  path(\"application\",views.ApplicationsList.as_view(),name=\"all_applications\"),\n  path(\"application_detail\",views.ApplicationsDetail.as_view(),name=\"application_details_update\"),\n  path(\"messages/<user_id>/\",views.Message.as_view(),name=\"messages_operations\"),\n  path(\"get_messages/<sender_id>/<receiver_id>/\",views.GetMessages.as_view(),name=\"get_messages_user\"),\n  path(\"send_messages\",views.SendMessage.as_view(),name=\"send_message\"),\n  path(\"profile_detail/<int:pk>/\",views.ProfileDetail.as_view(),name=\"get_profile\"),",
        "detail": "chefWeb.myapp.urls",
        "documentation": {}
    },
    {
        "label": "JobsList",
        "kind": 6,
        "importPath": "chefWeb.myapp.views",
        "description": "chefWeb.myapp.views",
        "peekOfCode": "class JobsList(generics.ListCreateAPIView):\n    queryset=JobsTable.objects.all()\n    serializer_class=JobsSerializer\n    # permission_classes=[IsAuthenticated]\nclass JobsDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset=JobsTable.objects.all()\n    serializer_class=JobsSerializer\n    permission_classes=[IsAuthenticated]\n   # This view does the CRUD operations on the ApplicationsTable\nclass ApplicationsList(generics.ListCreateAPIView):",
        "detail": "chefWeb.myapp.views",
        "documentation": {}
    },
    {
        "label": "JobsDetail",
        "kind": 6,
        "importPath": "chefWeb.myapp.views",
        "description": "chefWeb.myapp.views",
        "peekOfCode": "class JobsDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset=JobsTable.objects.all()\n    serializer_class=JobsSerializer\n    permission_classes=[IsAuthenticated]\n   # This view does the CRUD operations on the ApplicationsTable\nclass ApplicationsList(generics.ListCreateAPIView):\n    queryset=ApplicationTable.objects.all()\n    serializer_class=ApplicationSerializer\n    permission_classes=[IsAuthenticated]\nclass ApplicationsDetail(generics.RetrieveUpdateDestroyAPIView):",
        "detail": "chefWeb.myapp.views",
        "documentation": {}
    },
    {
        "label": "ApplicationsList",
        "kind": 6,
        "importPath": "chefWeb.myapp.views",
        "description": "chefWeb.myapp.views",
        "peekOfCode": "class ApplicationsList(generics.ListCreateAPIView):\n    queryset=ApplicationTable.objects.all()\n    serializer_class=ApplicationSerializer\n    permission_classes=[IsAuthenticated]\nclass ApplicationsDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset=ApplicationTable.objects.all()\n    serializer_class=ApplicationSerializer\n    permission_classes=[IsAuthenticated]\n# This view deals with retrieve messages, sending messages, getting messages\nclass Message(generics.ListAPIView):",
        "detail": "chefWeb.myapp.views",
        "documentation": {}
    },
    {
        "label": "ApplicationsDetail",
        "kind": 6,
        "importPath": "chefWeb.myapp.views",
        "description": "chefWeb.myapp.views",
        "peekOfCode": "class ApplicationsDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset=ApplicationTable.objects.all()\n    serializer_class=ApplicationSerializer\n    permission_classes=[IsAuthenticated]\n# This view deals with retrieve messages, sending messages, getting messages\nclass Message(generics.ListAPIView):\n    serializer_class=MessageSerializer\n    permission_classes=[IsAuthenticated]\n    def get_queryset(self):\n        user_id=self.kwargs[\"user_id\"]  ",
        "detail": "chefWeb.myapp.views",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "chefWeb.myapp.views",
        "description": "chefWeb.myapp.views",
        "peekOfCode": "class Message(generics.ListAPIView):\n    serializer_class=MessageSerializer\n    permission_classes=[IsAuthenticated]\n    def get_queryset(self):\n        user_id=self.kwargs[\"user_id\"]  \n        messages=MessageTable.objects.filter(\n            id__in=Subquery(\n                User.objects.filter(\n                    Q(sender__receiver=user_id)|\n                    Q(receiver__sender=user_id)",
        "detail": "chefWeb.myapp.views",
        "documentation": {}
    },
    {
        "label": "GetMessages",
        "kind": 6,
        "importPath": "chefWeb.myapp.views",
        "description": "chefWeb.myapp.views",
        "peekOfCode": "class GetMessages(generics.ListAPIView):\n    serializer_class=MessageSerializer\n    permission_classes=[IsAuthenticated]\n    def get_queryset(self):\n        sender_id=self.kwargs[\"sender_id\"]\n        receiver_id=self.kwargs[\"receiver_id\"]\n        message=MessageTable.objects.filter(\n            sender__in=[sender_id,receiver_id],\n            receiver__in=[sender_id,receiver_id]\n        ).order_by('-sent_date')",
        "detail": "chefWeb.myapp.views",
        "documentation": {}
    },
    {
        "label": "SendMessage",
        "kind": 6,
        "importPath": "chefWeb.myapp.views",
        "description": "chefWeb.myapp.views",
        "peekOfCode": "class SendMessage(generics.CreateAPIView):\n    serializer_class=MessageSerializer\n    permission_classes=[IsAuthenticated]\n# This view helps in retrieving details of a particular profile\nclass ProfileDetail(generics.RetrieveUpdateAPIView):\n    serializer_class=ProfileSerializer\n    queryset=ProfileTable.objects.all()\n    permission_classes=[IsAuthenticated]\nclass SearchUser(generics.ListAPIView):\n    serializer_class=ProfileSerializer",
        "detail": "chefWeb.myapp.views",
        "documentation": {}
    },
    {
        "label": "ProfileDetail",
        "kind": 6,
        "importPath": "chefWeb.myapp.views",
        "description": "chefWeb.myapp.views",
        "peekOfCode": "class ProfileDetail(generics.RetrieveUpdateAPIView):\n    serializer_class=ProfileSerializer\n    queryset=ProfileTable.objects.all()\n    permission_classes=[IsAuthenticated]\nclass SearchUser(generics.ListAPIView):\n    serializer_class=ProfileSerializer\n    queryset=ProfileTable.objects.all()\n    permission_classes=[IsAuthenticated]\n    def list(self, request, *args, **kwargs):\n        username=self.kwargs['username']",
        "detail": "chefWeb.myapp.views",
        "documentation": {}
    },
    {
        "label": "SearchUser",
        "kind": 6,
        "importPath": "chefWeb.myapp.views",
        "description": "chefWeb.myapp.views",
        "peekOfCode": "class SearchUser(generics.ListAPIView):\n    serializer_class=ProfileSerializer\n    queryset=ProfileTable.objects.all()\n    permission_classes=[IsAuthenticated]\n    def list(self, request, *args, **kwargs):\n        username=self.kwargs['username']\n        logged_in_user=self.request.user\n        users=ProfileTable.objects.filter(\n            Q(user_id__username__icontains=username)|\n            Q(last_name__icontains=username)|",
        "detail": "chefWeb.myapp.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "chefWeb.manage",
        "description": "chefWeb.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chefWeb.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "chefWeb.manage",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend_v1.node_modules.flatted.python.flatted",
        "description": "frontend_v1.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend_v1.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend_v1.node_modules.flatted.python.flatted",
        "description": "frontend_v1.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend_v1.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend_v1.node_modules.flatted.python.flatted",
        "description": "frontend_v1.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend_v1.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend_v1.node_modules.flatted.python.flatted",
        "description": "frontend_v1.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend_v1.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend_v1.node_modules.flatted.python.test",
        "description": "frontend_v1.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "frontend_v1.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "frontend_v1.node_modules.flatted.python.test",
        "description": "frontend_v1.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "frontend_v1.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "frontend_v1.node_modules.flatted.python.test",
        "description": "frontend_v1.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "frontend_v1.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "frontend_v1.node_modules.flatted.python.test",
        "description": "frontend_v1.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "frontend_v1.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "frontend_v1.node_modules.flatted.python.test",
        "description": "frontend_v1.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "frontend_v1.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "frontend_v1.node_modules.flatted.python.test",
        "description": "frontend_v1.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "frontend_v1.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "frontend_v1.node_modules.flatted.python.test",
        "description": "frontend_v1.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "frontend_v1.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "frontend_v1.node_modules.flatted.python.test",
        "description": "frontend_v1.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "frontend_v1.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "frontend_v1.node_modules.flatted.python.test",
        "description": "frontend_v1.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "frontend_v1.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "frontend_v1.node_modules.flatted.python.test",
        "description": "frontend_v1.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "frontend_v1.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "frontend_v1.node_modules.flatted.python.test",
        "description": "frontend_v1.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "frontend_v1.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "frontend_v1.node_modules.flatted.python.test",
        "description": "frontend_v1.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "frontend_v1.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "frontend_v1.node_modules.flatted.python.test",
        "description": "frontend_v1.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend_v1.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "frontend_v1.node_modules.flatted.python.test",
        "description": "frontend_v1.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend_v1.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "frontend_v1.node_modules.flatted.python.test",
        "description": "frontend_v1.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend_v1.node_modules.flatted.python.test",
        "documentation": {}
    }
]
[
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "pyrebase",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyrebase",
        "description": "pyrebase",
        "detail": "pyrebase",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http.response",
        "description": "django.http.response",
        "isExtraImport": true,
        "detail": "django.http.response",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http.response",
        "description": "django.http.response",
        "isExtraImport": true,
        "detail": "django.http.response",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "countries_for_language",
        "importPath": "country_list",
        "description": "country_list",
        "isExtraImport": true,
        "detail": "country_list",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.base_user",
        "description": "django.contrib.auth.base_user",
        "isExtraImport": true,
        "detail": "django.contrib.auth.base_user",
        "documentation": {}
    },
    {
        "label": "graphene",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "graphene",
        "description": "graphene",
        "detail": "graphene",
        "documentation": {}
    },
    {
        "label": "DjangoObjectType",
        "importPath": "graphene_django",
        "description": "graphene_django",
        "isExtraImport": true,
        "detail": "graphene_django",
        "documentation": {}
    },
    {
        "label": "jobsfakeData",
        "importPath": "myapp.views",
        "description": "myapp.views",
        "isExtraImport": true,
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "pycountry",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pycountry",
        "description": "pycountry",
        "detail": "pycountry",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "GraphQLView",
        "importPath": "graphene_django.views",
        "description": "graphene_django.views",
        "isExtraImport": true,
        "detail": "graphene_django.views",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "migrations.0001_initial",
        "description": "migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Countries',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "class UserAdmin(BaseUserAdmin):\n  model = CustomUser\n  list_display=[\"user_id\",\"username\",\"email\",\"phone_number\",\"profile_picture\",\"user_type\",\"date_joined\"]\n  fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        ('Personal info', {'fields': ('first_name', 'last_name')}),\n        ('Permissions', {'fields': ('is_staff', 'is_active', 'is_superuser', 'groups', 'user_permissions')}),\n        ('Important dates', {'fields': ('last_login', 'date_joined')}),\n    )\n  add_fieldsets = (",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "ProfileAdmin",
        "kind": 6,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "class ProfileAdmin(admin.ModelAdmin):\n  list_display=[\"profile_id\",\"user_id\",\"first_name\",\"last_name\",\"location\",\"bio\",\"experience_years\",\"speciality\"]\nclass LocationAdmin(admin.ModelAdmin):\n  list_display=[\"country\",\"state\",\"city\",\"postal_code\"]\nclass JobAdmin(admin.ModelAdmin):\n  list_display=[\"user_id\",\"job_id\",\"title\",\"description\",\"location\",\"salary\",\"employement_type\",\"posted_date\",\"application_deadline\",\"short_description\"]\n  def short_description(self, obj):\n        length = 100  # Adjust this value to your desired length\n        return (obj.description[:length] + '...') if len(obj.description) > length else obj.description\n  short_description.short_description = 'requirements'",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "LocationAdmin",
        "kind": 6,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "class LocationAdmin(admin.ModelAdmin):\n  list_display=[\"country\",\"state\",\"city\",\"postal_code\"]\nclass JobAdmin(admin.ModelAdmin):\n  list_display=[\"user_id\",\"job_id\",\"title\",\"description\",\"location\",\"salary\",\"employement_type\",\"posted_date\",\"application_deadline\",\"short_description\"]\n  def short_description(self, obj):\n        length = 100  # Adjust this value to your desired length\n        return (obj.description[:length] + '...') if len(obj.description) > length else obj.description\n  short_description.short_description = 'requirements'\nclass ApplicationAdmin(admin.ModelAdmin):\n  list_display=[\"application_id\",\"job_id\",\"applicant_id\",\"application_date\",\"status\"]",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "JobAdmin",
        "kind": 6,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "class JobAdmin(admin.ModelAdmin):\n  list_display=[\"user_id\",\"job_id\",\"title\",\"description\",\"location\",\"salary\",\"employement_type\",\"posted_date\",\"application_deadline\",\"short_description\"]\n  def short_description(self, obj):\n        length = 100  # Adjust this value to your desired length\n        return (obj.description[:length] + '...') if len(obj.description) > length else obj.description\n  short_description.short_description = 'requirements'\nclass ApplicationAdmin(admin.ModelAdmin):\n  list_display=[\"application_id\",\"job_id\",\"applicant_id\",\"application_date\",\"status\"]\nclass MessageAdmin(admin.ModelAdmin):\n  list_display=[\"user\",\"sender\",\"receiver\",\"message_content\",\"sent_date\",\"read_status\"]",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "ApplicationAdmin",
        "kind": 6,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "class ApplicationAdmin(admin.ModelAdmin):\n  list_display=[\"application_id\",\"job_id\",\"applicant_id\",\"application_date\",\"status\"]\nclass MessageAdmin(admin.ModelAdmin):\n  list_display=[\"user\",\"sender\",\"receiver\",\"message_content\",\"sent_date\",\"read_status\"]\nclass NotificationAdmin(admin.ModelAdmin):\n  list_display=[\"notification_id\",\"user_id\",\"notification_type\",\"message\",\"sent_date\",\"read_status\"]\nadmin.site.register(ProfileTable,ProfileAdmin)\nadmin.site.register(CustomUser,UserAdmin)\nadmin.site.register(Countries,LocationAdmin)\nadmin.site.register(JobsTable,JobAdmin)",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "MessageAdmin",
        "kind": 6,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "class MessageAdmin(admin.ModelAdmin):\n  list_display=[\"user\",\"sender\",\"receiver\",\"message_content\",\"sent_date\",\"read_status\"]\nclass NotificationAdmin(admin.ModelAdmin):\n  list_display=[\"notification_id\",\"user_id\",\"notification_type\",\"message\",\"sent_date\",\"read_status\"]\nadmin.site.register(ProfileTable,ProfileAdmin)\nadmin.site.register(CustomUser,UserAdmin)\nadmin.site.register(Countries,LocationAdmin)\nadmin.site.register(JobsTable,JobAdmin)\nadmin.site.register(ApplicationTable,ApplicationAdmin)\nadmin.site.register(MessageTable,MessageAdmin)",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "NotificationAdmin",
        "kind": 6,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "class NotificationAdmin(admin.ModelAdmin):\n  list_display=[\"notification_id\",\"user_id\",\"notification_type\",\"message\",\"sent_date\",\"read_status\"]\nadmin.site.register(ProfileTable,ProfileAdmin)\nadmin.site.register(CustomUser,UserAdmin)\nadmin.site.register(Countries,LocationAdmin)\nadmin.site.register(JobsTable,JobAdmin)\nadmin.site.register(ApplicationTable,ApplicationAdmin)\nadmin.site.register(MessageTable,MessageAdmin)\nadmin.site.register(NotificationTable,NotificationAdmin)",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "MyappConfig",
        "kind": 6,
        "importPath": "apps",
        "description": "apps",
        "peekOfCode": "class MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'",
        "detail": "apps",
        "documentation": {}
    },
    {
        "label": "SignInWithEmailAndPassword",
        "kind": 2,
        "importPath": "authentication",
        "description": "authentication",
        "peekOfCode": "def SignInWithEmailAndPassword(email,password):\n  user=auth.sign_in_with_email_and_password(email,password)\n  db=firebase.database()\n  # Pass the user's idToken to the push method\n  results = db.child(\"users\").push(user['idToken'])\n  return HttpResponse(status=200)",
        "detail": "authentication",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "authentication",
        "description": "authentication",
        "peekOfCode": "config = {\n  \"apiKey\": \"AIzaSyD7WJcDRrOVKEfoe2hvfGwjTljhjS_JW4o\",\n  \"authDomain\": \"chef-web-8a2f2.firebaseapp.com\",\n  \"projectId\": \"chef-web-8a2f2\",\n  \"storageBucket\": \"chef-web-8a2f2.appspot.com\",\n  \"messagingSenderId\": \"909916564111\",\n  \"appId\": \"1:909916564111:web:6a929f1d0b21f846e35efa\"\n}\nfirebase = pyrebase.initialize_app(config)\nauth=firebase.auth()",
        "detail": "authentication",
        "documentation": {}
    },
    {
        "label": "firebase",
        "kind": 5,
        "importPath": "authentication",
        "description": "authentication",
        "peekOfCode": "firebase = pyrebase.initialize_app(config)\nauth=firebase.auth()\ndef SignInWithEmailAndPassword(email,password):\n  user=auth.sign_in_with_email_and_password(email,password)\n  db=firebase.database()\n  # Pass the user's idToken to the push method\n  results = db.child(\"users\").push(user['idToken'])\n  return HttpResponse(status=200)",
        "detail": "authentication",
        "documentation": {}
    },
    {
        "label": "get_next_user_id",
        "kind": 2,
        "importPath": "faker_data",
        "description": "faker_data",
        "peekOfCode": "def get_next_user_id():\n    global user_id_counter\n    current_id = user_id_counter\n    user_id_counter += 1\n    return current_id\n# Function to generate fake job data\ndef generate_fake_job_data(num_jobs):\n    jobs = []\n    for _ in range(num_jobs):\n        userid = 5",
        "detail": "faker_data",
        "documentation": {}
    },
    {
        "label": "generate_fake_job_data",
        "kind": 2,
        "importPath": "faker_data",
        "description": "faker_data",
        "peekOfCode": "def generate_fake_job_data(num_jobs):\n    jobs = []\n    for _ in range(num_jobs):\n        userid = 5\n        job_id=get_next_user_id()\n        title = fake.job()\n        description = fake.paragraph(nb_sentences=5)\n        location = 1\n        salary = f\"${random.randint(30, 100)}k\"\n        employment_type = random.choice(employment_types)",
        "detail": "faker_data",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "faker_data",
        "description": "faker_data",
        "peekOfCode": "fake = Faker()\n# Define parameters\nnum_jobs = 50  # Number of fake jobs to generate\n# Define possible employment types\nemployment_types = [\"full\",\"part\"]\nuser_id_counter = 2\ndef get_next_user_id():\n    global user_id_counter\n    current_id = user_id_counter\n    user_id_counter += 1",
        "detail": "faker_data",
        "documentation": {}
    },
    {
        "label": "num_jobs",
        "kind": 5,
        "importPath": "faker_data",
        "description": "faker_data",
        "peekOfCode": "num_jobs = 50  # Number of fake jobs to generate\n# Define possible employment types\nemployment_types = [\"full\",\"part\"]\nuser_id_counter = 2\ndef get_next_user_id():\n    global user_id_counter\n    current_id = user_id_counter\n    user_id_counter += 1\n    return current_id\n# Function to generate fake job data",
        "detail": "faker_data",
        "documentation": {}
    },
    {
        "label": "employment_types",
        "kind": 5,
        "importPath": "faker_data",
        "description": "faker_data",
        "peekOfCode": "employment_types = [\"full\",\"part\"]\nuser_id_counter = 2\ndef get_next_user_id():\n    global user_id_counter\n    current_id = user_id_counter\n    user_id_counter += 1\n    return current_id\n# Function to generate fake job data\ndef generate_fake_job_data(num_jobs):\n    jobs = []",
        "detail": "faker_data",
        "documentation": {}
    },
    {
        "label": "user_id_counter",
        "kind": 5,
        "importPath": "faker_data",
        "description": "faker_data",
        "peekOfCode": "user_id_counter = 2\ndef get_next_user_id():\n    global user_id_counter\n    current_id = user_id_counter\n    user_id_counter += 1\n    return current_id\n# Function to generate fake job data\ndef generate_fake_job_data(num_jobs):\n    jobs = []\n    for _ in range(num_jobs):",
        "detail": "faker_data",
        "documentation": {}
    },
    {
        "label": "fake_jobs",
        "kind": 5,
        "importPath": "faker_data",
        "description": "faker_data",
        "peekOfCode": "fake_jobs = generate_fake_job_data(num_jobs)\n# Create DataFrame\ndf = pd.DataFrame(fake_jobs)\n# Show the first 5 rows of the DataFrame\nprint(df.head())\n# Save to CSV\ndf.to_csv('fake_jobs_dataset.csv', index=False)",
        "detail": "faker_data",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "faker_data",
        "description": "faker_data",
        "peekOfCode": "df = pd.DataFrame(fake_jobs)\n# Show the first 5 rows of the DataFrame\nprint(df.head())\n# Save to CSV\ndf.to_csv('fake_jobs_dataset.csv', index=False)",
        "detail": "faker_data",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class UserManager(BaseUserManager):\n  def create_user(self,email,password=None,**extra_fields):\n    if not email:\n      raise ValueError(\"Email is required\")\n    email=self.normalize_email(email)\n    user=self.model(email=email,**extra_fields)\n    user.set_password(password)\n    user.save(using=self.db)\n    return user\n  def create_superuser(self,email,password=None,**extra_fields):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class CustomUser(AbstractUser):\n  USER_TYPES=(\n    (\"s\",\"seeker\"),\n    (\"e\",\"employer\")\n  )\n  user_id=models.AutoField(primary_key=True)\n  username=models.CharField(max_length=500)\n  password=models.CharField(max_length=128)\n  email=models.EmailField(max_length=254,unique=True)\n  phone_number=models.CharField(max_length=15)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Countries",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Countries(models.Model):\n  countries = dict(countries_for_language('en'))\n  country=models.CharField(max_length=2,choices=countries)\n  state=models.CharField(max_length=150)\n  city=models.CharField(max_length=150)\n  postal_code=models.CharField(max_length=10)\n  def __str__(self) -> str:\n    return f\"{self.country}\\t{self.state}\\t{self.city}\\t{self.postal_code}\"\nclass ProfileTable(models.Model):\n  profile_id=models.AutoField(primary_key=True)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ProfileTable",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class ProfileTable(models.Model):\n  profile_id=models.AutoField(primary_key=True)\n  user_id=models.OneToOneField(CustomUser,on_delete=models.CASCADE)\n  first_name=models.CharField(max_length=150)\n  last_name=models.CharField(max_length=150)\n  location=models.ForeignKey(Countries,on_delete=models.SET_NULL,null=True)\n  bio=models.TextField(max_length=500)\n  experience_years=models.CharField(max_length=2)\n  speciality=models.CharField(max_length=250)\nclass JobsTable(models.Model):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "JobsTable",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class JobsTable(models.Model):\n  EMP_TYPES=(\n    (\"full\",\"full_time\"),\n    (\"part\",\"part_time\")\n  )\n  user_id=models.ForeignKey(CustomUser,on_delete=models.CASCADE)\n  job_id=models.AutoField(primary_key=True)\n  title=models.CharField(max_length=200)\n  description=models.TextField(max_length=250)\n  location=models.ForeignKey(Countries,on_delete=models.CASCADE)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ApplicationTable",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class ApplicationTable(models.Model):\n  STATUS=(\n    (\"p\",\"pending\"),\n    (\"a\",\"accepted\"),\n    (\"r\",\"rejected\")\n  )\n  application_id=models.AutoField(primary_key=True)\n  job_id=models.ForeignKey(JobsTable,on_delete=models.CASCADE)\n  applicant_id=models.ForeignKey(CustomUser,models.CASCADE)\n  application_date=models.DateField()",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MessageTable",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class MessageTable(models.Model):\n  user = models.ForeignKey(CustomUser, on_delete=models.SET_NULL, null=True, related_name=\"user\")\n  sender = models.ForeignKey(CustomUser, on_delete=models.SET_NULL, null=True, related_name=\"sender\")\n  receiver = models.ForeignKey(CustomUser, on_delete=models.SET_NULL, null=True, related_name=\"receiver\")\n  message_content=models.TextField(max_length=65535)\n  sent_date=models.DateField(auto_now_add=True)\n  read_status=models.BooleanField(default=False)\n  class Meta:\n    ordering=['sent_date']\n  def __str__(self):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "NotificationTable",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class NotificationTable(models.Model):\n  NOTIFICATION_TYPE=(\n    (\"new_job\",\"new job\"),\n    (\"application_status\",\"application status\")\n  )\n  notification_id=models.AutoField(primary_key=True)\n  user_id=models.ForeignKey(CustomUser,on_delete=models.CASCADE)\n  notification_type=models.CharField(max_length=50,choices=NOTIFICATION_TYPE)\n  message=models.TextField(max_length=1500)\n  sent_date=models.DateField()",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "JobsTableType",
        "kind": 6,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "class JobsTableType(DjangoObjectType):\n    class Meta:\n        model = JobsTable\n        fields=\"__all__\"\nclass Query(graphene.ObjectType):\n    all_jobs = graphene.List(JobsTableType)\n    def resolve_all_jobs(self,info):\n        return JobsTable.objects.all()\nschema = graphene.Schema(query=Query)",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "Query",
        "kind": 6,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "class Query(graphene.ObjectType):\n    all_jobs = graphene.List(JobsTableType)\n    def resolve_all_jobs(self,info):\n        return JobsTable.objects.all()\nschema = graphene.Schema(query=Query)",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 5,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "schema = graphene.Schema(query=Query)",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "ProfileSerializer",
        "kind": 6,
        "importPath": "serializers",
        "description": "serializers",
        "peekOfCode": "class ProfileSerializer(serializers.ModelSerializer):\n  class Meta:\n    model=ProfileTable\n    fields=\"__all__\"  \nclass CountriesSerializer(serializers.ModelSerializer):\n  country_name = serializers.SerializerMethodField()  # Add custom field for country name\n  class Meta:\n      model = Countries\n      fields = ['country','country_name', 'state', 'city', 'postal_code']\n  def get_country_name(self, obj):",
        "detail": "serializers",
        "documentation": {}
    },
    {
        "label": "CountriesSerializer",
        "kind": 6,
        "importPath": "serializers",
        "description": "serializers",
        "peekOfCode": "class CountriesSerializer(serializers.ModelSerializer):\n  country_name = serializers.SerializerMethodField()  # Add custom field for country name\n  class Meta:\n      model = Countries\n      fields = ['country','country_name', 'state', 'city', 'postal_code']\n  def get_country_name(self, obj):\n    try:\n       # Convert country code to country name\n      country_name_id= pycountry.countries.get(alpha_2=obj.country).name\n      return country_name_id",
        "detail": "serializers",
        "documentation": {}
    },
    {
        "label": "JobsTitleSerializer",
        "kind": 6,
        "importPath": "serializers",
        "description": "serializers",
        "peekOfCode": "class JobsTitleSerializer(serializers.ModelSerializer):\n  class Meta:\n    model=JobsTable\n    fields=[\"title\"]\nclass JobsSerializer(serializers.ModelSerializer):\n  location=CountriesSerializer()\n  class Meta:\n    model=JobsTable\n    fields=['user_id','job_id', 'title', 'description', 'location', 'salary', 'employement_type', 'posted_date', 'application_deadline', 'requirements']\nclass ApplicationSerializer(serializers.ModelSerializer):",
        "detail": "serializers",
        "documentation": {}
    },
    {
        "label": "JobsSerializer",
        "kind": 6,
        "importPath": "serializers",
        "description": "serializers",
        "peekOfCode": "class JobsSerializer(serializers.ModelSerializer):\n  location=CountriesSerializer()\n  class Meta:\n    model=JobsTable\n    fields=['user_id','job_id', 'title', 'description', 'location', 'salary', 'employement_type', 'posted_date', 'application_deadline', 'requirements']\nclass ApplicationSerializer(serializers.ModelSerializer):\n  class Meta:\n    model=ApplicationTable\n    fields=\"__all__\"\nclass MessageSerializer(serializers.ModelSerializer):",
        "detail": "serializers",
        "documentation": {}
    },
    {
        "label": "ApplicationSerializer",
        "kind": 6,
        "importPath": "serializers",
        "description": "serializers",
        "peekOfCode": "class ApplicationSerializer(serializers.ModelSerializer):\n  class Meta:\n    model=ApplicationTable\n    fields=\"__all__\"\nclass MessageSerializer(serializers.ModelSerializer):\n  sender_profile=ProfileSerializer(read_only=True)\n  receiver_profile=ProfileSerializer(read_only=True)\n  class Meta:\n    model=MessageTable\n    fields=[\"id\",\"user\",\"sender\",\"sender_profile\",\"receiver\",\"receiver_profile\",\"message_content\",\"sent_date\",\"read_status\"]",
        "detail": "serializers",
        "documentation": {}
    },
    {
        "label": "MessageSerializer",
        "kind": 6,
        "importPath": "serializers",
        "description": "serializers",
        "peekOfCode": "class MessageSerializer(serializers.ModelSerializer):\n  sender_profile=ProfileSerializer(read_only=True)\n  receiver_profile=ProfileSerializer(read_only=True)\n  class Meta:\n    model=MessageTable\n    fields=[\"id\",\"user\",\"sender\",\"sender_profile\",\"receiver\",\"receiver_profile\",\"message_content\",\"sent_date\",\"read_status\"]",
        "detail": "serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "urls",
        "description": "urls",
        "peekOfCode": "urlpatterns = [\n  path(\"jobs\",views.JobsList.as_view(),name=\"all_jobs\"),\n  # path(\"jobs_titles\",views.JobsTitle,name=\"job-titles\"),\n  path(\"jobs_detail\",views.JobsDetail.as_view(),name=\"job_details_update\"),\n  path(\"application\",views.ApplicationsList.as_view(),name=\"all_applications\"),\n  path(\"application_detail\",views.ApplicationsDetail.as_view(),name=\"application_details_update\"),\n  path(\"messages/<user_id>/\",views.Message.as_view(),name=\"messages_operations\"),\n  path(\"get_messages/<sender_id>/<receiver_id>/\",views.GetMessages.as_view(),name=\"get_messages_user\"),\n  path(\"send_messages\",views.SendMessage.as_view(),name=\"send_message\"),\n  path(\"profile_detail/<int:pk>/\",views.ProfileDetail.as_view(),name=\"get_profile\"),",
        "detail": "urls",
        "documentation": {}
    },
    {
        "label": "JobsList",
        "kind": 6,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "class JobsList(generics.ListCreateAPIView):\n    queryset=JobsTable.objects.all()\n    serializer_class=JobsSerializer\n    # permission_classes=[IsAuthenticated]\nclass JobsDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset=JobsTable.objects.all()\n    serializer_class=JobsSerializer\n    permission_classes=[IsAuthenticated]\ndef JobsTitle(request):\n    queryset=JobsTable.objects.values('title')",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "JobsDetail",
        "kind": 6,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "class JobsDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset=JobsTable.objects.all()\n    serializer_class=JobsSerializer\n    permission_classes=[IsAuthenticated]\ndef JobsTitle(request):\n    queryset=JobsTable.objects.values('title')\n    print(queryset)\n    serializer=JobsTitleSerializer(queryset,many=True)\n    return serializer.data\n        # json_data=json.dumps(queryset)",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "ApplicationsList",
        "kind": 6,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "class ApplicationsList(generics.ListCreateAPIView):\n    queryset=ApplicationTable.objects.all()\n    serializer_class=ApplicationSerializer\n    permission_classes=[IsAuthenticated]\nclass ApplicationsDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset=ApplicationTable.objects.all()\n    serializer_class=ApplicationSerializer\n    permission_classes=[IsAuthenticated]\n# This view deals with retrieve messages, sending messages, getting messages\nclass Message(generics.ListAPIView):",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "ApplicationsDetail",
        "kind": 6,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "class ApplicationsDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset=ApplicationTable.objects.all()\n    serializer_class=ApplicationSerializer\n    permission_classes=[IsAuthenticated]\n# This view deals with retrieve messages, sending messages, getting messages\nclass Message(generics.ListAPIView):\n    serializer_class=MessageSerializer\n    permission_classes=[IsAuthenticated]\n    def get_queryset(self):\n        user_id=self.kwargs[\"user_id\"]  ",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "class Message(generics.ListAPIView):\n    serializer_class=MessageSerializer\n    permission_classes=[IsAuthenticated]\n    def get_queryset(self):\n        user_id=self.kwargs[\"user_id\"]  \n        messages=MessageTable.objects.filter(\n            id__in=Subquery(\n                User.objects.filter(\n                    Q(sender__receiver=user_id)|\n                    Q(receiver__sender=user_id)",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "GetMessages",
        "kind": 6,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "class GetMessages(generics.ListAPIView):\n    serializer_class=MessageSerializer\n    permission_classes=[IsAuthenticated]\n    def get_queryset(self):\n        sender_id=self.kwargs[\"sender_id\"]\n        receiver_id=self.kwargs[\"receiver_id\"]\n        message=MessageTable.objects.filter(\n            sender__in=[sender_id,receiver_id],\n            receiver__in=[sender_id,receiver_id]\n        ).order_by('-sent_date')",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "SendMessage",
        "kind": 6,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "class SendMessage(generics.CreateAPIView):\n    serializer_class=MessageSerializer\n    permission_classes=[IsAuthenticated]\n# This view helps in retrieving details of a particular profile\nclass ProfileDetail(generics.RetrieveUpdateAPIView):\n    serializer_class=ProfileSerializer\n    queryset=ProfileTable.objects.all()\n    permission_classes=[IsAuthenticated]\nclass SearchUser(generics.ListAPIView):\n    serializer_class=ProfileSerializer",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "ProfileDetail",
        "kind": 6,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "class ProfileDetail(generics.RetrieveUpdateAPIView):\n    serializer_class=ProfileSerializer\n    queryset=ProfileTable.objects.all()\n    permission_classes=[IsAuthenticated]\nclass SearchUser(generics.ListAPIView):\n    serializer_class=ProfileSerializer\n    queryset=ProfileTable.objects.all()\n    permission_classes=[IsAuthenticated]\n    def list(self, request, *args, **kwargs):\n        username=self.kwargs['username']",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "SearchUser",
        "kind": 6,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "class SearchUser(generics.ListAPIView):\n    serializer_class=ProfileSerializer\n    queryset=ProfileTable.objects.all()\n    permission_classes=[IsAuthenticated]\n    def list(self, request, *args, **kwargs):\n        username=self.kwargs['username']\n        logged_in_user=self.request.user\n        users=ProfileTable.objects.filter(\n            Q(user_id__username__icontains=username)|\n            Q(last_name__icontains=username)|",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "JobsTitle",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def JobsTitle(request):\n    queryset=JobsTable.objects.values('title')\n    print(queryset)\n    serializer=JobsTitleSerializer(queryset,many=True)\n    return serializer.data\n        # json_data=json.dumps(queryset)\n# This view does the CRUD operations on the ApplicationsTable\nclass ApplicationsList(generics.ListCreateAPIView):\n    queryset=ApplicationTable.objects.all()\n    serializer_class=ApplicationSerializer",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "jobsfakeData",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def jobsfakeData():\n    jobs=[]\n    user_instance=CustomUser.objects.get(user_id=5)\n    country_instance=Countries.objects.get(id=1)\n    print(country_instance)\n    with open('fake_jobs_dataset.csv', mode='r') as file:\n    # Create a CSV reader object\n        csv_reader = csv.reader(file)\n    # Iterate over each row in the CSV file\n        for row in csv_reader:",
        "detail": "views",
        "documentation": {}
    }
]